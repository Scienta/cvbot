# coding: utf-8

"""
    CVPartner

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from scienta.cvpartner_api.models.certification import Certification
from scienta.cvpartner_api.models.course import Course
from scienta.cvpartner_api.models.education import Education
from scienta.cvpartner_api.models.key_qualification import KeyQualification
from scienta.cvpartner_api.models.language import Language
from scienta.cvpartner_api.models.position import Position
from scienta.cvpartner_api.models.presentation import Presentation
from scienta.cvpartner_api.models.project_experience import ProjectExperience
from scienta.cvpartner_api.models.recommendation import Recommendation
from scienta.cvpartner_api.models.technology import Technology
from scienta.cvpartner_api.models.user_image import UserImage
from scienta.cvpartner_api.models.work_experience import WorkExperience
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Cv(BaseModel):
    """
    Cv
    """ # noqa: E501
    id: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = None
    company_id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    title: Optional[Dict[str, Any]] = None
    email: Optional[StrictStr] = None
    born_day: Optional[StrictInt] = None
    born_month: Optional[StrictInt] = None
    born_year: Optional[StrictInt] = None
    nationality: Optional[Dict[str, Any]] = None
    place_of_residence: Optional[Dict[str, Any]] = None
    educations: Optional[List[Education]] = None
    key_qualifications: Optional[List[KeyQualification]] = None
    project_experiences: Optional[List[ProjectExperience]] = None
    work_experiences: Optional[List[WorkExperience]] = None
    languages: Optional[List[Language]] = None
    technologies: Optional[List[Technology]] = None
    certifications: Optional[List[Certification]] = None
    courses: Optional[List[Course]] = None
    presentations: Optional[List[Presentation]] = None
    recommendations: Optional[List[Recommendation]] = None
    positions: Optional[List[Position]] = None
    image: Optional[UserImage] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "user_id", "company_id", "name", "title", "email", "born_day", "born_month", "born_year", "nationality", "place_of_residence", "educations", "key_qualifications", "project_experiences", "work_experiences", "languages", "technologies", "certifications", "courses", "presentations", "recommendations", "positions", "image"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Cv from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in educations (list)
        _items = []
        if self.educations:
            for _item in self.educations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['educations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in key_qualifications (list)
        _items = []
        if self.key_qualifications:
            for _item in self.key_qualifications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['key_qualifications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in project_experiences (list)
        _items = []
        if self.project_experiences:
            for _item in self.project_experiences:
                if _item:
                    _items.append(_item.to_dict())
            _dict['project_experiences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in work_experiences (list)
        _items = []
        if self.work_experiences:
            for _item in self.work_experiences:
                if _item:
                    _items.append(_item.to_dict())
            _dict['work_experiences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in languages (list)
        _items = []
        if self.languages:
            for _item in self.languages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['languages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in technologies (list)
        _items = []
        if self.technologies:
            for _item in self.technologies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['technologies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in certifications (list)
        _items = []
        if self.certifications:
            for _item in self.certifications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['certifications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in courses (list)
        _items = []
        if self.courses:
            for _item in self.courses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['courses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in presentations (list)
        _items = []
        if self.presentations:
            for _item in self.presentations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['presentations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recommendations (list)
        _items = []
        if self.recommendations:
            for _item in self.recommendations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recommendations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in positions (list)
        _items = []
        if self.positions:
            for _item in self.positions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['positions'] = _items
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Cv from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "company_id": obj.get("company_id"),
            "name": obj.get("name"),
            "title": obj.get("title"),
            "email": obj.get("email"),
            "born_day": obj.get("born_day"),
            "born_month": obj.get("born_month"),
            "born_year": obj.get("born_year"),
            "nationality": obj.get("nationality"),
            "place_of_residence": obj.get("place_of_residence"),
            "educations": [Education.from_dict(_item) for _item in obj.get("educations")] if obj.get("educations") is not None else None,
            "key_qualifications": [KeyQualification.from_dict(_item) for _item in obj.get("key_qualifications")] if obj.get("key_qualifications") is not None else None,
            "project_experiences": [ProjectExperience.from_dict(_item) for _item in obj.get("project_experiences")] if obj.get("project_experiences") is not None else None,
            "work_experiences": [WorkExperience.from_dict(_item) for _item in obj.get("work_experiences")] if obj.get("work_experiences") is not None else None,
            "languages": [Language.from_dict(_item) for _item in obj.get("languages")] if obj.get("languages") is not None else None,
            "technologies": [Technology.from_dict(_item) for _item in obj.get("technologies")] if obj.get("technologies") is not None else None,
            "certifications": [Certification.from_dict(_item) for _item in obj.get("certifications")] if obj.get("certifications") is not None else None,
            "courses": [Course.from_dict(_item) for _item in obj.get("courses")] if obj.get("courses") is not None else None,
            "presentations": [Presentation.from_dict(_item) for _item in obj.get("presentations")] if obj.get("presentations") is not None else None,
            "recommendations": [Recommendation.from_dict(_item) for _item in obj.get("recommendations")] if obj.get("recommendations") is not None else None,
            "positions": [Position.from_dict(_item) for _item in obj.get("positions")] if obj.get("positions") is not None else None,
            "image": UserImage.from_dict(obj.get("image")) if obj.get("image") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


