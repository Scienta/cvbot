# coding: utf-8

"""
    CVPartner

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CvSummary(BaseModel):
    """
    CvSummary
    """ # noqa: E501
    id: StrictStr
    user_id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    image: Optional[Union[str, Any]] = None
    title: Optional[StrictStr] = None
    titles: Optional[Dict[str, Any]] = None
    email: Optional[StrictStr] = None
    company_id: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    owner_updated_at: Optional[StrictStr] = None
    country_code: Optional[StrictStr] = None
    language_code: Optional[StrictStr] = None
    language_codes: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["id", "user_id", "name", "image", "title", "titles", "email", "company_id", "updated_at", "owner_updated_at", "country_code", "language_code", "language_codes"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CvSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CvSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "name": obj.get("name"),
            "image": obj.get("image"),
            "title": obj.get("title"),
            "titles": obj.get("titles"),
            "email": obj.get("email"),
            "company_id": obj.get("company_id"),
            "updated_at": obj.get("updated_at"),
            "owner_updated_at": obj.get("owner_updated_at"),
            "country_code": obj.get("country_code"),
            "language_code": obj.get("language_code"),
            "language_codes": obj.get("language_codes")
        })
        return _obj


